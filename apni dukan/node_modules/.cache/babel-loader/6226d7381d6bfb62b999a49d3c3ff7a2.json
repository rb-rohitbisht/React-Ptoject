{"ast":null,"code":"// import React from \"react\";\n// import axios from \"axios\";\n// import validator from \"validator\";\n// import { ButtonContainer } from \"../button\";\n// import { useState } from \"react\";\n// import { Form, Alert } from \"react-bootstrap\";\n// const RegisterForm = () => {\n//   const [username, setUserName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [conformPassword, setConformPassword] = useState(\"\");\n//   const [errors, setErrors] = useState([]);\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     let data = { username: username, email: email, password };\n//     axios\n//       .post(\"http://localhost:2000/user/register\", data)\n//       .then((response) => {\n//         console.log(response.data);\n//         if (response.data === \"data submited\") {\n//           alert(\"you registered as a user \");\n//           setUserName(\"\");\n//           setEmail(\"\");\n//           setPassword(\"\");\n//           setConformPassword(\"\");\n//         } else {\n//           setErrors(response.data);\n//         }\n//       })\n//       .catch((err) => {\n//         console.log(\"error : *****\", err);\n//         alert(\"connection error plese try again\");\n//       });\n//   };\n//   return (\n//     <div>\n//       <Form id=\"form\">\n//       <h1>register your self <span role=\"img\" aria-label=\"leg\" >ü§ó</span></h1>\n//         <Form.Group controlId=\"formBasicUserName\">\n//           <Form.Label>User Name</Form.Label>\n//           <Form.Control\n//             placeholder=\"ex. pwn tiwari\"\n//             type=\"text\"\n//             value={username}\n//             onChange={(e) => setUserName(e.target.value)}\n//             autoComplete=\"off\"\n//           />\n//           <Form.Text className=\"text-muted\">\n//             {username === \"\" ? (\n//               <p>\n//                 User Name cant be blanke{\" \"}\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>\n//               </p>\n//             ) : username.length > 20 ? (\n//               <p>\n//                 {\" \"}\n//                 username cannot contain more then 20 characters ‚Äç\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>{\" \"}\n//               </p>\n//             ) : null}\n//           </Form.Text>\n//         </Form.Group>\n//         <Form.Group controlId=\"formBasicEmail\">\n//           <Form.Label>Email address</Form.Label>\n//           <Form.Control\n//             type=\"email\"\n//             placeholder=\"Enter email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <Form.Text className=\"text-muted\">\n//             {validator.isEmail(email) ? (\n//               <p>\n//                 \" valid email formate{\" \"}\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚úÖ\n//                 </span>\n//                 \"\n//               </p>\n//             ) : (\n//               <p>\n//                 invalid email formate{\" \"}\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>\n//               </p>\n//             )}\n//             We'll never share your email with anyone else.üëÆ‚Äç‚ôÇÔ∏è\n//           </Form.Text>\n//         </Form.Group>\n//         <Form.Group controlId=\"formBasicPassword\">\n//           <Form.Label>Password</Form.Label>\n//           <Form.Control\n//             type=\"password\"\n//             placeholder=\"Password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <Form.Text className=\"text-muted\">\n//             {password.length === 0 ? (\n//               <p>\n//                 password can not be empty{\" \"}\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>{\" \"}\n//               </p>\n//             ) : password.length < 8 ? (\n//               <p>\n//                 password must be 8 character long\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>{\" \"}\n//               </p>\n//             ) : password.length > 20 ? (\n//               <p>\n//                 password cannot contain more then 20 characters\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>{\" \"}\n//               </p>\n//             ) : null}\n//           </Form.Text>\n//         </Form.Group>\n//         <Form.Group controlId=\"formBasicPassword2\">\n//           <Form.Label>Conform Password</Form.Label>\n//           <Form.Control\n//             type=\"password\"\n//             placeholder=\"conform Password\"\n//             value={conformPassword}\n//             onChange={(e) => setConformPassword(e.target.value)}\n//           />\n//           <Form.Text>\n//             {password !== conformPassword ? (\n//               <p>\n//                 password not match{\" \"}\n//                 <span role=\"img\" aria-label=\"img\">\n//                   ‚ùå\n//                 </span>\n//               </p>\n//             ) : null}\n//           </Form.Text>\n//         </Form.Group>\n//         {errors.length > 0 ? (\n//           <Alert variant=\"danger\">\n//             <ul>\n//               {errors.map((error, index) => (\n//                 <li key={index}>{error}</li>\n//               ))}\n//             </ul>\n//           </Alert>\n//         ) : null}\n//         <ButtonContainer onClick={submitHandler}>\n//           sign Up / register\n//         </ButtonContainer>\n//       </Form>\n//     </div>\n//   );\n// };\n// export default RegisterForm;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/shop/src/components/auth/register.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from \"react\";\r\n// import axios from \"axios\";\r\n// import validator from \"validator\";\r\n// import { ButtonContainer } from \"../button\";\r\n// import { useState } from \"react\";\r\n// import { Form, Alert } from \"react-bootstrap\";\r\n\r\n// const RegisterForm = () => {\r\n//   const [username, setUserName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [conformPassword, setConformPassword] = useState(\"\");\r\n//   const [errors, setErrors] = useState([]);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     let data = { username: username, email: email, password };\r\n//     axios\r\n//       .post(\"http://localhost:2000/user/register\", data)\r\n//       .then((response) => {\r\n//         console.log(response.data);\r\n//         if (response.data === \"data submited\") {\r\n//           alert(\"you registered as a user \");\r\n//           setUserName(\"\");\r\n//           setEmail(\"\");\r\n//           setPassword(\"\");\r\n//           setConformPassword(\"\");\r\n//         } else {\r\n//           setErrors(response.data);\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(\"error : *****\", err);\r\n//         alert(\"connection error plese try again\");\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n     \r\n//       <Form id=\"form\">\r\n//       <h1>register your self <span role=\"img\" aria-label=\"leg\" >ü§ó</span></h1>\r\n//         <Form.Group controlId=\"formBasicUserName\">\r\n//           <Form.Label>User Name</Form.Label>\r\n//           <Form.Control\r\n//             placeholder=\"ex. pwn tiwari\"\r\n//             type=\"text\"\r\n//             value={username}\r\n//             onChange={(e) => setUserName(e.target.value)}\r\n//             autoComplete=\"off\"\r\n//           />\r\n//           <Form.Text className=\"text-muted\">\r\n//             {username === \"\" ? (\r\n//               <p>\r\n//                 User Name cant be blanke{\" \"}\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>\r\n//               </p>\r\n//             ) : username.length > 20 ? (\r\n//               <p>\r\n//                 {\" \"}\r\n//                 username cannot contain more then 20 characters ‚Äç\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>{\" \"}\r\n//               </p>\r\n//             ) : null}\r\n//           </Form.Text>\r\n//         </Form.Group>\r\n\r\n//         <Form.Group controlId=\"formBasicEmail\">\r\n//           <Form.Label>Email address</Form.Label>\r\n//           <Form.Control\r\n//             type=\"email\"\r\n//             placeholder=\"Enter email\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//           />\r\n//           <Form.Text className=\"text-muted\">\r\n//             {validator.isEmail(email) ? (\r\n//               <p>\r\n//                 \" valid email formate{\" \"}\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚úÖ\r\n//                 </span>\r\n//                 \"\r\n//               </p>\r\n//             ) : (\r\n//               <p>\r\n//                 invalid email formate{\" \"}\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>\r\n              \r\n//               </p>\r\n//             )}\r\n//             We'll never share your email with anyone else.üëÆ‚Äç‚ôÇÔ∏è\r\n//           </Form.Text>\r\n//         </Form.Group>\r\n\r\n//         <Form.Group controlId=\"formBasicPassword\">\r\n//           <Form.Label>Password</Form.Label>\r\n//           <Form.Control\r\n//             type=\"password\"\r\n//             placeholder=\"Password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//           />\r\n//           <Form.Text className=\"text-muted\">\r\n//             {password.length === 0 ? (\r\n//               <p>\r\n//                 password can not be empty{\" \"}\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>{\" \"}\r\n//               </p>\r\n//             ) : password.length < 8 ? (\r\n//               <p>\r\n//                 password must be 8 character long\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>{\" \"}\r\n//               </p>\r\n//             ) : password.length > 20 ? (\r\n//               <p>\r\n//                 password cannot contain more then 20 characters\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>{\" \"}\r\n//               </p>\r\n//             ) : null}\r\n//           </Form.Text>\r\n//         </Form.Group>\r\n\r\n//         <Form.Group controlId=\"formBasicPassword2\">\r\n//           <Form.Label>Conform Password</Form.Label>\r\n//           <Form.Control\r\n//             type=\"password\"\r\n//             placeholder=\"conform Password\"\r\n//             value={conformPassword}\r\n//             onChange={(e) => setConformPassword(e.target.value)}\r\n//           />\r\n//           <Form.Text>\r\n//             {password !== conformPassword ? (\r\n//               <p>\r\n//                 password not match{\" \"}\r\n//                 <span role=\"img\" aria-label=\"img\">\r\n//                   ‚ùå\r\n//                 </span>\r\n//               </p>\r\n//             ) : null}\r\n//           </Form.Text>\r\n//         </Form.Group>\r\n\r\n//         {errors.length > 0 ? (\r\n//           <Alert variant=\"danger\">\r\n//             <ul>\r\n//               {errors.map((error, index) => (\r\n//                 <li key={index}>{error}</li>\r\n//               ))}\r\n//             </ul>\r\n//           </Alert>\r\n//         ) : null}\r\n\r\n//         <ButtonContainer onClick={submitHandler}>\r\n//           sign Up / register\r\n//         </ButtonContainer>\r\n//       </Form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}