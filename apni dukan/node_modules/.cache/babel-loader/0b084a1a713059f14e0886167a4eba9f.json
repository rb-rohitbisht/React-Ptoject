{"ast":null,"code":"// import React from 'react';\n// import PaypalExpressBtn from 'react-paypal-express-checkout';\n// export default class MyApp extends React.Component {\n//     render(props) {\n//         const onSuccess = (payment) => {\n//             // Congratulation, it came here means everything's fine!\n//                     console.log(\"The payment was succeeded!\", payment);\n//                     this.props.clearCart()\n//                     this.props.history.push(\"/\")\n//             \t\t// You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\n//         }\n//         const onCancel = (data) => {\n//             // User pressed \"cancel\" or close Paypal's popup!\n//             console.log('The payment was cancelled!', data);\n//             // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\n//         }\n//         const onError = (err) => {\n//             // The main Paypal's script cannot be loaded or somethings block the loading of that script!\n//             console.log(\"Error!\", err);\n//             // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\n//             // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\n//         }\n//         let env = 'sandbox'; // you can set here to 'production' for production\n//         let currency = 'INR'; // or you can set this value from your props or state\n//         let total = this.props.total; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\n//         // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\n//         const client = {\n//             sandbox:  process.env.REACT_APP_SENDBOX_ID,\n//             production: 'YOUR-PRODUCTION-APP-ID',\n//         }\n//         // In order to get production's app-ID, you will have to send your app to Paypal for approval first\n//         // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\n//         //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\n//         // For production app-ID:\n//         //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\n//         // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\n//         return (\n//             <PaypalExpressBtn env={env} client={client} currency={currency} total={total} onError={onError} onSuccess={onSuccess} onCancel={onCancel} />\n//         );\n//     }\n// }","map":{"version":3,"sources":["C:/Users/Dell/Desktop/shop/src/components/cart/paypal.jsx"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from 'react';\r\n// import PaypalExpressBtn from 'react-paypal-express-checkout';\r\n \r\n// export default class MyApp extends React.Component {\r\n    \r\n//     render(props) {\r\n//         const onSuccess = (payment) => {\r\n//             // Congratulation, it came here means everything's fine!\r\n//                     console.log(\"The payment was succeeded!\", payment);\r\n//                     this.props.clearCart()\r\n//                     this.props.history.push(\"/\")\r\n//             \t\t// You can bind the \"payment\" object's value to your state or props or whatever here, please see below for sample returned data\r\n//         }\r\n \r\n//         const onCancel = (data) => {\r\n//             // User pressed \"cancel\" or close Paypal's popup!\r\n//             console.log('The payment was cancelled!', data);\r\n//             // You can bind the \"data\" object's value to your state or props or whatever here, please see below for sample returned data\r\n//         }\r\n \r\n//         const onError = (err) => {\r\n//             // The main Paypal's script cannot be loaded or somethings block the loading of that script!\r\n//             console.log(\"Error!\", err);\r\n//             // Because the Paypal's main script is loaded asynchronously from \"https://www.paypalobjects.com/api/checkout.js\"\r\n//             // => sometimes it may take about 0.5 second for everything to get set, or for the button to appear\r\n//         }\r\n \r\n//         let env = 'sandbox'; // you can set here to 'production' for production\r\n//         let currency = 'INR'; // or you can set this value from your props or state\r\n//         let total = this.props.total; // same as above, this is the total amount (based on currency) to be paid by using Paypal express checkout\r\n//         // Document on Paypal's currency code: https://developer.paypal.com/docs/classic/api/currency_codes/\r\n \r\n//         const client = {\r\n//             sandbox:  process.env.REACT_APP_SENDBOX_ID,\r\n//             production: 'YOUR-PRODUCTION-APP-ID',\r\n//         }\r\n//         // In order to get production's app-ID, you will have to send your app to Paypal for approval first\r\n//         // For sandbox app-ID (after logging into your developer account, please locate the \"REST API apps\" section, click \"Create App\"):\r\n//         //   => https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\r\n//         // For production app-ID:\r\n//         //   => https://developer.paypal.com/docs/classic/lifecycle/goingLive/\r\n \r\n//         // NB. You can also have many Paypal express checkout buttons on page, just pass in the correct amount and they will work!\r\n//         return (\r\n//             <PaypalExpressBtn env={env} client={client} currency={currency} total={total} onError={onError} onSuccess={onSuccess} onCancel={onCancel} />\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}